name: APK Build
run-name: APK $v-{{ inputs.tag_name }}

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Name of the version'
        required: true
        type: string
        default: 'M1'

jobs:
  build:
    name: Build Release APK
    runs-on: ubuntu-latest
    steps:
      - name: Validate and Echo Tag Name
        run: |
          VERSION_TAG="v${{ inputs.tag_name }}"
          echo "Generated tag name: $VERSION_TAG"
          if ! [[ $VERSION_TAG =~ ^v[0-9]+(\.[0-9]+)*$ ]]; then
            echo "Error: Invalid tag format"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: Load secrets
        env:
          MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
          KEYSTORE: ${{ secrets.KEYSTORE }}
          KEYSTORE_PROPERTIES: ${{ secrets.KEYSTORE_PROPERTIES }}
        run: |
          echo $MAPS_API_KEY > local.properties
          echo $GOOGLE_SERVICES_JSON | base64 -di > app/google-services.json
          echo $KEYSTORE | base64 -di > app/keystore.jks
          echo $KEYSTORE_PROPERTIES | base64 -di > app/keystore.properties

      - name: Build Release APK
        run: ./gradlew assembleRelease

      - name: Upload APK to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: $apk-${{ inputs.tag_name }}.apk
          path: app/build/outputs/apk/release/app-release.apk

  release:
    needs: build
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download APK from Artifacts
        uses: actions/download-artifact@v2
        with:
          name: $apk-${{ inputs.tag_name }}.apk
          path: release

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ inputs.tag_name }}
          name: Release ${{ inputs.tag_name }}
          body: |
            Release ${{ inputs.tag_name }}
          draft: false
          prerelease: false

      - name : Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/app-release.apk
          asset_name: $apk-${{ inputs.tag_name }}.apk
          asset_content_type: application/vnd.android.package-archive